[package]
name = "kite"
version = "0.1.0"
edition = "2021"

[dependencies]
kite-ebpf-types = { path = "../kite-ebpf-types" }

aya = { workspace = true }
aya-log = { workspace = true }

anyhow = { workspace = true, default-features = true }

clap = { workspace = true }
kube = { workspace = true }
kube-core = { workspace = true }
k8s-openapi = { workspace = true }
serde_json = { workspace = true }
serde = { workspace = true }
tracing = {workspace = true}
tracing-subscriber = {workspace = true}
libc = { workspace = true }
tokio = { workspace = true }
tokio-serde = { workspace = true }
tokio-util = { workspace = true }
which = { workspace = true }
env_logger = "0.11.5"
log = "0.4.22"
num-traits = "0.2.19"
metrics = "0.24.0"

[build-dependencies]
cargo_metadata = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
kite-ebpf = { path = "../kite-ebpf" }

[[bin]]
name = "kite"
path = "src/main.rs"

[[bin]]
name = "kite-init-container"
path = "src/bin/init_container.rs"

[[bin]]
name = "kite-loader"
path = "src/bin/loader.rs"
